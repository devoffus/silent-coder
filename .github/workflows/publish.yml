name: Build and Publish Silent Coder

on:
  push:
    tags:
      - v*

permissions:
  contents: write

jobs:
  release:
    # Increase the overall job timeout to 60 minutes
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.5.2

      # For macOS - Create entitlements file only
      - name: Create signing configuration
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p build

          # Create entitlements file
          cat > build/entitlements.mac.plist << 'ENTITLEMENTS'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.allow-dyld-environment-variables</key>
            <true/>
            <key>com.apple.security.automation.apple-events</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
          </dict>
          </plist>
          ENTITLEMENTS
          # Removed extra config and notarize script creation
        shell: bash

      - name: Install dependencies
        # This now includes @electron/notarize
        run: pnpm install --no-frozen-lockfile

      - name: Build Silent Coder
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run build

      # Windows-specific publish step
      - name: Publish to GitHub Releases (Windows)
        if: matrix.os == 'windows-latest'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 45
          max_attempts: 3
          command: pnpm run build:win -- --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      # macOS-specific publish step (Build and Sign only)
      - name: Publish to GitHub Releases (macOS)
        if: matrix.os == 'macos-latest'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 45
          max_attempts: 3
          # Use the standard build command without extra config
          command: pnpm run build:mac -- --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.MAC_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          CSC_IDENTITY_AUTO_DISCOVERY: true
          # Increased timeout further to 30 minutes
          CSC_TIMEOUT: 1800000
          DEBUG: electron-builder

      # New Step: Notarize macOS App
      - name: Notarize macOS App
        if: matrix.os == 'macos-latest'
        run: |
          # No need to install notarize tool here, it's in devDependencies
          # Run notarization script
          node -e 'require("@electron/notarize").notarize({
            appBundleId: "com.kuluruvineeth.silentcoder",
            appPath: `dist/mac-arm64/silent-coder.app`,
            appleId: process.env.APPLE_ID,
            appleIdPassword: process.env.APPLE_APP_SPECIFIC_PASSWORD,
            teamId: process.env.APPLE_TEAM_ID
          }).then(() => console.log("Notarization successful.")).catch(err => { console.error("Notarization failed:", err); process.exit(1); });'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        shell: bash
